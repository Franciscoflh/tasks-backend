pipeline{
    agent any
    stages{
        stage('Construindo Backend'){
            steps{
                bat 'mvn clean package -DskipTests=true'
            }
        }
        stage('Construindo Testes Unitarios'){
            steps{
                bat 'mvn test'
            }
        }
        stage('Analise do Sonar'){
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps{
                withSonarQubeEnv('SONAR_LOCAL'){
                    bat "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=DeployBackend -Dsonar.host.url=http://localhost:9000 -Dsonar.login=347af1d767d6092273ea91880c83b17712b6158e -Dsonar.java.binaries=target -Dsonar.coverage.exclusions=**/.mvn/**,**/src/test/**,**/model/**,**Application.java"
                }
            }
        }
        stage('Quality Gate'){
            steps{
                sleep(10)
                timeout(time:1, unit: 'MINUTES'){
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy Backend'){
            steps{
                deploy adapters: [tomcat8(credentialsId: 'TomcatLogin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks-backend', war: 'target/tasks-backend.war'
            }
        }
        stage('API Test'){
            steps{
                dir('api-test') {
                git credentialsId: 'GithubID', url: 'https://github.com/Franciscoflh/api-test'
                bat 'mvn test'
                }
            }
        }
        stage('Deploy FrontEnd'){
            steps{
                dir('frontend') {
                git credentialsId: 'GithubID', url: 'https://github.com/Franciscoflh/tasks-frontend'
                bat 'mvn clean package -DskipTests=true'
                deploy adapters: [tomcat8(credentialsId: 'TomcatLogin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks', war: 'target/tasks.war'
                }
            }
        }
        stage('Teste Funcional'){
            steps{
                dir('functional-test') {
                git credentialsId: 'GithubID', url: 'https://github.com/Franciscoflh/functional-tests'
                bat 'mvn test'
                }
            }
        }
        stage('Deploy Prod'){
            steps{
                bat 'docker-compose build'
                bat 'docker-compose up -d'
            }
        }
        stage('Health Check'){
            steps{
                sleep(9)
                dir('functional-test') {
                bat 'mvn verify'
                }
            }
        }
    }
    post{
        always{
            junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml, api-test/target/surefire--reports/*.xml, functional-test/target/surefire-reports/*.xml, functional-test/target/failsafe-reports/*.xml'
        }
        unsuccessful{
            emailext attachLog: true, body: 'Leia o log abaixo', subject: 'Build $BUILD_NUMBER falhou', to: 'francisco.f+jenkins@acad.ifma.edu.br'
        }
        fixed{
            emailext attachLog: true, body: 'Leia o log abaixo', subject: 'Build $BUILD_NUMBER funcionou', to: 'francisco.f+jenkins@acad.ifma.edu.br'
        }
    }
}


